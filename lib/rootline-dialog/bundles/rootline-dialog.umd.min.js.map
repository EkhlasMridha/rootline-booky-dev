{"version":3,"sources":["../../../projects/rootline-dialog/src/lib/root-line-modal.config.ts","../../../projects/rootline-dialog/src/lib/rootline-modal/rootline-modal.component.html","../../../projects/rootline-dialog/src/lib/rootline-modal/rootline-modal.component.ts","../../../projects/rootline-dialog/src/lib/rootline-modal.service.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog.module.ts"],"names":["DefaultConfig","successColor","errorColor","warnColor","generalColor","type","modalWidth","disableClose","isLoader","loaderText","primaryEvent","secondaryEvent","ROOTLINE_MODAL_CONFIG","InjectionToken","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","RootlineModalComponent","config","ref","this","modalConfig","typeColor","setModalColor","prototype","primaryButton","event","close","secodaryButton","i0","ɵɵdirectiveInject","MAT_DIALOG_DATA","i1","MatDialogRef","selectors","decls","vars","consts","template","rf","ctx","RootlineModalService","dialog","token","storedDefault","default","Object","assign","verifyConfig","applyConfig","dispose","openDialog","open","width","data","openConfirmationModal","ɵɵinject","MatDialog","factory","ɵfac","providedIn","DefaultComponentConfig","RootlineDialogModule","forChild","ngModule","providers","provide","useValue","imports","CommonModule","MatButtonModule","HttpClientModule","MatIconModule","MatDialogModule","FlexLayoutModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ModalConfig {\r\n  warnColor: string;\r\n  successColor: string;\r\n  errorColor: string;\r\n  generalColor: string;\r\n  type: 'success' | 'warn' | 'error' | 'general';\r\n  matIcon: string;\r\n  localIcon: string;\r\n  headerText: string;\r\n  description: string;\r\n  primaryButtonName: string;\r\n  secondaryButtonName: string;\r\n  modalWidth: string;\r\n  disableClose: boolean;\r\n  isLoader: boolean;\r\n  loaderText: string;\r\n  primaryEvent: (event: MouseEvent) => any;\r\n  secondaryEvent: (event: MouseEvent) => any;\r\n}\r\n\r\nexport const DefaultConfig: Partial<ModalConfig> = {\r\n  successColor: '#009900 ',\r\n  errorColor: '#ff0000 ',\r\n  warnColor: '#FFCC00 ',\r\n  generalColor: '#242424',\r\n  type: 'general',\r\n  modalWidth: 'auto',\r\n  disableClose: false,\r\n  isLoader: false,\r\n  loaderText: 'Loading ...',\r\n  primaryEvent: () => {},\r\n  secondaryEvent: () => {},\r\n};\r\n\r\nexport interface ModalToken {\r\n  default: ModalConfig;\r\n  config: Partial<ModalConfig>;\r\n}\r\n\r\nexport const ROOTLINE_MODAL_CONFIG = new InjectionToken<ModalToken>(\r\n  'ModalToken'\r\n);\r\n","<div fxLayout=\"column\" fxLayoutGap=\"30px\" *ngIf=\"!modalConfig.isLoader\">\n  <div fxLayout=\"column\" fxLayoutGap=\"20px\">\n    <div\n      *ngIf=\"modalConfig.matIcon && !modalConfig.localIcon\"\n      fxLayoutAlign=\"center center\"\n      class=\"modal-icon\"\n    >\n      <mat-icon [style.color]=\"typeColor\">{{ modalConfig.matIcon }}</mat-icon>\n    </div>\n    <div\n      *ngIf=\"modalConfig.localIcon\"\n      class=\"modal-icon\"\n      fxLayoutAlign=\"center center\"\n    >\n      <mat-icon\n        [svgIcon]=\"modalConfig.localIcon\"\n        [style.color]=\"typeColor\"\n      ></mat-icon>\n    </div>\n    <div fxLayout=\"column\" fxLayoutGap=\"15px\">\n      <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.headerText\">\n        <span class=\"text-center modal-header\">{{\n          modalConfig.headerText\n        }}</span>\n      </div>\n      <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.description\">\n        <span class=\"modal-description\">{{ modalConfig.description }}</span>\n      </div>\n    </div>\n  </div>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n    <button\n      mat-stroked-button\n      class=\"outline-secondary-button\"\n      color=\"primary\"\n      *ngIf=\"modalConfig.secondaryButtonName\"\n      (click)=\"secodaryButton($event)\"\n    >\n      {{ modalConfig.secondaryButtonName }}\n    </button>\n    <button\n      mat-raised-button\n      color=\"accent\"\n      *ngIf=\"modalConfig.primaryButtonName\"\n      (click)=\"primaryButton($event)\"\n    >\n      {{ modalConfig.primaryButtonName }}\n    </button>\n  </div>\n</div>\n<div\n  *ngIf=\"modalConfig.isLoader\"\n  fxLayoutAlign=\"start center\"\n  fxLayoutGap=\"30px\"\n>\n  <div>\n    <mat-spinner color=\"accent\" diameter=\"40\"></mat-spinner>\n  </div>\n  <div>\n    <span style=\"font-size: 16px\">{{ modalConfig.loaderText }}</span>\n  </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DefaultConfig, ModalConfig } from '../root-line-modal.config';\n\n@Component({\n  selector: 'rootline-rootline-modal',\n  templateUrl: './rootline-modal.component.html',\n  styleUrls: ['./rootline-modal.component.scss'],\n})\nexport class RootlineModalComponent {\n  modalConfig: Partial<ModalConfig>;\n  typeColor: string;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) config: Partial<ModalConfig>,\n    private ref: MatDialogRef<RootlineModalComponent>\n  ) {\n    this.modalConfig = config;\n    this.typeColor = this.setModalColor(this.modalConfig);\n  }\n\n  primaryButton(event: MouseEvent) {\n    this.modalConfig.primaryEvent(event);\n    this.ref.close();\n    this.modalConfig = DefaultConfig;\n  }\n  secodaryButton(event: MouseEvent) {\n    this.modalConfig.secondaryEvent(event);\n    this.ref.close();\n    this.modalConfig = DefaultConfig;\n  }\n\n  private setModalColor(config: Partial<ModalConfig>) {\n    if (config.type == 'general') {\n      return config.generalColor;\n    } else if (config.type == 'success') {\n      return config.successColor;\n    } else if (config.type == 'warn') {\n      return config.warnColor;\n    } else if (config.type == 'error') {\n      return config.errorColor;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ModalConfig, ModalToken } from './root-line-modal.config';\nimport { ROOTLINE_MODAL_CONFIG } from './root-line-modal.config';\nimport { RootlineModalComponent } from './rootline-modal/rootline-modal.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RootlineModalService {\n  modalConfig: Partial<ModalConfig>;\n  storedDefault: Partial<ModalConfig>;\n  constructor(\n    private dialog: MatDialog,\n    @Inject(ROOTLINE_MODAL_CONFIG) token: ModalToken\n  ) {\n    this.storedDefault = token.default;\n    this.modalConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    this.modalConfig = this.verifyConfig(this.modalConfig);\n  }\n\n  private applyConfig(config: Partial<ModalConfig>) {\n    config = this.verifyConfig(config);\n    this.modalConfig = {\n      ...this.modalConfig,\n      ...config,\n    };\n  }\n\n  dispose() {\n    this.modalConfig = { ...this.storedDefault };\n  }\n\n  private verifyConfig(config: Partial<ModalConfig>) {\n    if (config.isLoader) {\n      config.modalWidth = 'auto';\n    }\n    return config;\n  }\n\n  private openDialog(config: Partial<ModalConfig>) {\n    this.applyConfig(config);\n    return this.dialog.open(RootlineModalComponent, {\n      width: this.modalConfig.modalWidth,\n      disableClose: this.modalConfig.disableClose,\n      data: this.modalConfig,\n    });\n  }\n\n  openConfirmationModal(\n    config: Partial<ModalConfig>\n  ): MatDialogRef<RootlineModalComponent> {\n    return this.openDialog(config);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RootlineModalComponent } from './rootline-modal/rootline-modal.component';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport {\n  ModalConfig,\n  DefaultConfig,\n  ROOTLINE_MODAL_CONFIG,\n} from './root-line-modal.config';\nimport { RootlineModalService } from './rootline-modal.service';\n\nexport const DefaultComponentConfig: Partial<ModalConfig> = {\n  ...DefaultConfig,\n};\n\n@NgModule({\n  declarations: [RootlineModalComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    HttpClientModule,\n    MatIconModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [RootlineModalService],\n  exports: [RootlineModalComponent],\n})\nexport class RootlineDialogModule {\n  static forChild(\n    config: Partial<ModalConfig> = {}\n  ): ModuleWithProviders<RootlineDialogModule> {\n    return {\n      ngModule: RootlineDialogModule,\n      providers: [\n        {\n          provide: ROOTLINE_MODAL_CONFIG,\n          useValue: {\n            default: DefaultComponentConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n"]}